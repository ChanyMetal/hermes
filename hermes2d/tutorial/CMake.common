#add_executable(${PROJECT_NAME} main.cpp)

# Each tutorial can define the particular hermes library to link with, or not
# define anything, in which case the "real" version will be used if hermes was
# built with "real" support, otherwise the "complex" version will be used:
if(NOT DEFINED HERMES)
    if(H2D_REAL)
        set(HERMES ${HERMES_REAL_BIN})
    else(H2D_REAL)
        set(HERMES ${HERMES_CPLX_BIN})
    endif(H2D_REAL)
endif(NOT DEFINED HERMES)

# Should debugging information be included for the tutorial?
if(DEBUG)
  set_property(TARGET ${PROJECT_NAME} PROPERTY COMPILE_FLAGS "-g")
endif(DEBUG)

# If the complex version is being used, define 'H2D_COMPLEX'.
if(H2D_COMPLEX)
  if(${HERMES} STREQUAL ${HERMES_CPLX_BIN})
      add_definitions(-DH2D_COMPLEX)
  endif(${HERMES} STREQUAL ${HERMES_CPLX_BIN})
endif(H2D_COMPLEX)
# If the real version is being used, define 'H2D_REAL'.
if(H2D_REAL)
  if(${HERMES} STREQUAL ${HERMES_REAL_BIN})
      add_definitions(-DH2D_REAL)
  endif(${HERMES} STREQUAL ${HERMES_REAL_BIN})
endif(H2D_REAL)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${hermes2d_SOURCE_DIR}/src)

include(PickRealOrCplxLibs)
PICK_REAL_OR_CPLX_LIBS(${HERMES} ${PROJECT_NAME})

target_link_libraries(${PROJECT_NAME} ${HERMES} ${TRILINOS_LIBRARIES})
add_dependencies(${PROJECT_NAME} ${HERMES})
